name: Windows

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating System'
        required: true
        type: string
      username:
        description: 'Custom Username'
        required: true
        type: string
      tunnel_provider:
        description: 'Select Tunnel Provider'
        required: true
        type: string
      region:
        description: 'Select Ngrok Tunnel Region'
        required: false
        type: string
        default: 'us'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
      install_virtual_sound_card:
        description: 'Install Virtual Sound Card'
        required: false
        type: string
        default: 'false'
      install_github_desktop:
        description: 'Install GitHub Desktop'
        required: false
        type: boolean
        default: false
      install_browseros:
        description: 'Install BrowserOS'
        required: false
        type: boolean
        default: false
      install_void_editor:
        description: 'Install Void Editor'
        required: false
        type: boolean
        default: false
      install_android_studio:
        description: 'Install Android Studio'
        required: false
        type: boolean
        default: false
      install_vscode:
        description: 'Install VS Code'
        required: false
        type: boolean
        default: false
      set_default_browser:
        description: 'Set Default Browser to Chrome/BrowserOS'
        required: false
        type: string
        default: 'chrome'
    secrets:
      NGROK_AUTH_TOKEN:
        required: true
      USER_PASSWORD:
        required: true

jobs:
  rdp-session:
    runs-on: ${{ inputs.os }}
    timeout-minutes: ${{ fromJSON(inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run pre-install script
        env:
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          ./scripts/preinstall-windows.ps1 -Username "${{ inputs.username }}" `
            -InstallVirtualSoundCard ${{ inputs.install_virtual_sound_card }} `
            -InstallGitHubDesktop ${{ inputs.install_github_desktop }} `
            -InstallBrowserOS ${{ inputs.install_browseros }} `
            -InstallVoidEditor ${{ inputs.install_void_editor }} `
            -InstallAndroidStudio ${{ inputs.install_android_studio }} `
            -InstallVSCode ${{ inputs.install_vscode }} `
            -SetDefaultBrowser "${{ inputs.set_default_browser }}"
        shell: pwsh

      - name: Enable RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Install jq
        run: |
          mkdir -p /usr/local/bin
          curl -L -o /usr/local/bin/jq.exe https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe
          chmod +x /usr/local/bin/jq.exe
        shell: bash

      - name: Setup Ngrok Tunnel
        if: inputs.tunnel_provider == 'ngrok'
        shell: bash
        run: |
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          CONFIG_FILE="ngrok.yml"
          PORT="3389"

          echo "version: \"2\"" > $CONFIG_FILE
          echo "authtoken: $AUTH_TOKEN" >> $CONFIG_FILE

          echo "Installing ngrok..."
          if [ "$RUNNER_ARCH" == "ARM64" ]; then
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-arm64.zip -o ngrok.zip
          else
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -o ngrok.zip
          fi
          unzip -o ngrok.zip

          echo "Starting ngrok tunnel on port $PORT..."
          pwsh -Command "Start-Process -NoNewWindow -FilePath 'ngrok.exe' -ArgumentList 'tcp $PORT --config $CONFIG_FILE --log $NGROK_LOG --region=${{ inputs.region }}'"

          echo "Waiting for ngrok to start..."
          sleep 15

          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      - name: Setup Cloudflare Tunnel
        if: inputs.tunnel_provider == 'cloudflare'
        shell: bash
        run: |
          echo "Installing cloudflared..."
          if [ "$RUNNER_ARCH" == "ARM64" ]; then
            curl -L --output cloudflared.exe https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-arm64.exe
          else
            curl -L --output cloudflared.exe https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe
          fi

          echo "Starting cloudflare tunnel..."
          CF_LOG="cloudflared.log"

          ./cloudflared.exe tunnel --url rdp://localhost:3389 > $CF_LOG 2>&1 &

          echo "Waiting for cloudflared to start..."
          sleep 15

          for i in {1..10}; do
            TUNNEL_URL=$(grep -o 'https://[a-z-]*\.trycloudflare\.com' $CF_LOG | head -n 1 || true)
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 3
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get Cloudflare tunnel info after multiple attempts."
            echo "Cloudflared log content:"
            cat "$CF_LOG" 2>/dev/null || echo "No cloudflared log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|https://||')
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "Tunnel established successfully: $RDP_ADDRESS"

      - name: Display Connection Details (Ngrok)
        if: inputs.tunnel_provider == 'ngrok'
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ inputs.os }}"
          echo "Protocol: RDP (Use Remote Desktop Connection)"
          echo "Port: 3389"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ inputs.username }}"
          echo "Password: ${{ secrets.USER_PASSWORD }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      - name: Display Connection Details (Cloudflare)
        if: inputs.tunnel_provider == 'cloudflare'
        run: |
          echo "ðŸŽ¯ CLOUDFLARE CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ inputs.os }}"
          echo "Protocol: RDP (Use Remote Desktop Connection)"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Username: ${{ inputs.username }}"
          echo "Password: ${{ secrets.USER_PASSWORD }}"
          echo "=========================================="
        shell: bash

      - name: Keep Workflow Alive
        shell: bash
        run: |
          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ inputs.timeout }} minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early."
          sleep ${{ inputs.timeout }}m

      - name: Clean up cloudflared process
        if: always() && inputs.tunnel_provider == 'cloudflare'
        shell: bash
        run: |
          echo "Cleaning up cloudflared process..."
          taskkill /IM cloudflared.exe /F 2>nul || echo "cloudflared process not found"