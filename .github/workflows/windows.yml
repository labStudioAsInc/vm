name: Windows

on:
  workflow_call:
    inputs:
      username:
        description: 'Custom Username'
        required: true
        type: string
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: string
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
      backup_enabled:
        description: 'Enable Google Drive Backup'
        required: true
        type: string
    secrets:
      NGROK_AUTH_TOKEN:
        required: true
      GDRIVE_SERVICE_ACCOUNT_KEY:
        required: false

env:
  BACKUP_DIR: "$HOME/cloud-backup"
  SYNC_DIR: "$HOME/persistent-data"
  GDRIVE_CREDENTIALS: "service_account.json"

jobs:
  rdp-session:
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create persistent directories
        if: inputs.backup_enabled == 'true'
        shell: bash
        run: |
          mkdir -p "${{ env.BACKUP_DIR }}" "${{ env.SYNC_DIR }}"
          echo "Persistent directories created"

      - name: Install gdrive CLI and dependencies
        if: inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Installing rclone for Google Drive..."
          curl -O https://downloads.rclone.org/rclone-current-windows-amd64.zip
          unzip rclone-current-windows-amd64.zip
          cd rclone-*-windows-amd64
          mkdir -p /usr/local/bin
          cp rclone.exe /usr/local/bin/
          echo "rclone installed successfully"

      - name: Setup Google Drive authentication
        if: inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY }}" > "${{ env.GDRIVE_CREDENTIALS }}"
          echo "Google Drive authentication configured"

      - name: Restore data from Google Drive
        if: inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Checking for existing backups..."
          echo "Using rclone for Windows backup restore"
          /usr/local/bin/rclone.exe lsjson drive: | grep "${{ inputs.username }}-backup" || echo "No backups found"

      - name: Run pre-install script
        run: ./scripts/preinstall-windows.ps1
        shell: pwsh

      - name: Configure RDP & User on Windows
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ inputs.username }}" -Password $securePass -FullName "${{ inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ inputs.username }}"

      - name: Install Virtual Sound Card and Enable Audio
        shell: pwsh
        run: |
          echo "Installing VB-CABLE Virtual Audio Device using Chocolatey..."
          choco install vb-cable -y --force

          echo "Enabling Windows Audio Services..."
          Set-Service -Name Audiosrv -StartupType Automatic -PassThru | Start-Service
          Set-Service -Name AudioEndpointBuilder -StartupType Automatic -PassThru | Start-Service

          echo "Configuring Group Policy for RDP Audio Redirection..."
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fEnableAudioCapture" -Value 1 -Type DWord -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableAudioCapture" -Value 0 -Type DWord -Force

          echo "Audio setup is complete."

      - name: Install jq
        run: |
          mkdir -p /usr/local/bin
          curl -L -o /usr/local/bin/jq.exe https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe
          chmod +x /usr/local/bin/jq.exe
        shell: bash

      - name: Setup Ngrok Tunnel
        shell: bash
        run: |
          REGION="${{ inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          CONFIG_FILE="ngrok.yml"
          PORT="3389"

          echo "version: \"2\"" > $CONFIG_FILE
          echo "authtoken: $AUTH_TOKEN" >> $CONFIG_FILE
          echo "region: $REGION" >> $CONFIG_FILE

          echo "Installing ngrok..."
          curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -o ngrok.zip
          unzip -o ngrok.zip

          echo "Starting ngrok tunnel on port $PORT..."
          pwsh -Command "Start-Process -NoNewWindow -FilePath 'ngrok.exe' -ArgumentList 'tcp $PORT --config $CONFIG_FILE --log $NGROK_LOG'"

          echo "Waiting for ngrok to start..."
          sleep 15

          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: windows-latest"
          echo "Protocol: RDP (Use Remote Desktop Connection)"
          echo "Port: 3389"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "Google Drive Backup: ${{ inputs.backup_enabled }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      - name: Keep Workflow Alive with Periodic Backup
        shell: bash
        run: |
          # Function to backup to Google Drive
          backup_to_gdrive() {
            if [ "${{ inputs.backup_enabled }}" != "true" ]; then
              return 0
            fi

            echo "Starting backup to Google Drive..."
            BACKUP_FILE="${{ env.BACKUP_DIR }}/backup-$(date +%Y%m%d-%H%M%S).tar.gz"

            # Create backup
            tar -czf "$BACKUP_FILE" -C "${{ env.SYNC_DIR }}" .

            /usr/local/bin/rclone.exe copy "$BACKUP_FILE" drive:

            if [ $? -eq 0 ]; then
              echo "Backup completed successfully!"
            else
              echo "Backup failed with status: $?"
            fi
          }

          # Set up signal handling for clean backup on exit
          cleanup() {
            echo "Workflow ending, performing final backup..."
            backup_to_gdrive
            exit 0
          }
          trap cleanup EXIT INT TERM

          # Initial backup
          backup_to_gdrive

          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ inputs.timeout }} minutes."
          if [ "${{ inputs.backup_enabled }}" == "true" ]; then
            echo "Auto-backup to Google Drive is scheduled every 30 minutes."
          fi
          echo "Press Ctrl+C in the workflow logs to terminate the session early."

          # Main loop with periodic backups
          COUNT=0
          while true; do
            echo "[$(date)] Session active - Address: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
            sleep 60
            COUNT=$((COUNT + 1))

            # Backup every 30 minutes if enabled
            if [ "${{ inputs.backup_enabled }}" == "true" ] && [ $((COUNT % 30)) -eq 0 ]; then
              backup_to_gdrive
            fi
          done

      - name: Final Backup
        if: always() && inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Performing final backup..."
          BACKUP_FILE="${{ env.BACKUP_DIR }}/backup-$(date +%Y%m%d-%H%M%S).tar.gz"

          tar -czf "$BACKUP_FILE" -C "${{ env.SYNC_DIR }}" .

          /usr/local/bin/rclone.exe copy "$BACKUP_FILE" drive:

          echo "Final backup completed successfully!"