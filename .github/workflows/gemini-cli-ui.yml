name: Gemini CLI UI

on:
  workflow_dispatch:
    inputs:
      tunnel_provider:
        description: 'Select Tunnel Provider'
        required: true
        type: choice
        options:
          - ngrok
        default: 'ngrok'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
          - us
          - eu
          - ap
          - au
          - sa
          - jp
          - in
        default: 'us'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '60'
  workflow_call:
    inputs:
      tunnel_provider:
        description: 'Select Tunnel Provider'
        required: true
        type: string
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: string
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
    secrets:
      NGROK_AUTH_TOKEN:
        required: true

jobs:
  gemini-cli-ui-session:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout || inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
        shell: bash

      - name: Clone Gemini CLI UI Repository
        run: |
          git clone https://github.com/cruzyjapan/Gemini-CLI-UI.git
        shell: bash

      - name: Install Dependencies and Run
        working-directory: ./Gemini-CLI-UI
        run: |
          npm install
          cp .env.example .env
          npm run dev > ../gemini-output.log 2>&1 &
        shell: bash

      - name: Setup Ngrok Tunnel
        if: (github.event.inputs.tunnel_provider || inputs.tunnel_provider) == 'ngrok'
        shell: bash
        run: |
          REGION="${{ github.event.inputs.region || inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          CONFIG_FILE="ngrok.yml"
          PORT="4009"

          echo "version: \"2\"" > $CONFIG_FILE
          echo "authtoken: $AUTH_TOKEN" >> $CONFIG_FILE
          echo "region: $REGION" >> $CONFIG_FILE

          echo "Installing ngrok..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update
          sudo apt install -y ngrok

          echo "Starting ngrok tunnel on port $PORT..."
          nohup ngrok http $PORT --config "$CONFIG_FILE" --log "$NGROK_LOG" > /dev/null 2>&1 &

          echo "Waiting for ngrok to start..."
          sleep 15

          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          echo "TUNNEL_URL=$TUNNEL_URL" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      - name: Display Connection Details (Ngrok)
        if: (github.event.inputs.tunnel_provider || inputs.tunnel_provider) == 'ngrok'
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ubuntu-latest"
          echo "Gemini CLI UI URL: ${{ env.TUNNEL_URL }}"
          echo "=========================================="
        shell: bash

      - name: Keep Workflow Alive
        shell: bash
        run: |
          echo "Gemini CLI UI session is now active!"
          echo "The workflow will remain running for ${{ github.event.inputs.timeout || inputs.timeout }} minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early."
          sleep ${{ github.event.inputs.timeout || inputs.timeout }}m