name: macOS

on:
  workflow_call:
    inputs:
      username:
        description: 'Custom Username'
        required: true
        type: string
      tunnel_provider:
        description: 'Select Tunnel Provider'
        required: true
        type: string
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: string
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
      install_virtual_sound_card:
        description: 'Install Virtual Sound Card (BlackHole)'
        required: false
        type: boolean
        default: false
    secrets:
      NGROK_AUTH_TOKEN:
        required: true
      CF_TUNNEL_TOKEN:
        required: true
      USER_PASSWORD:
        required: true

jobs:
  rdp-session:
    runs-on: macos-latest
    timeout-minutes: ${{ fromJSON(inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run pre-install script
        env:
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          chmod +x ./scripts/preinstall-mac.sh
          ./scripts/preinstall-mac.sh "${{ inputs.username }}" \
            "${{ inputs.install_virtual_sound_card }}"

      - name: Install jq
        run: |
          brew install jq
        shell: bash

      - name: Setup Ngrok Tunnel
        if: inputs.tunnel_provider == 'ngrok'
        shell: bash
        run: |
          REGION="${{ inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          CONFIG_FILE="ngrok.yml"
          PORT="5900"

          echo "version: \"2\"" > $CONFIG_FILE
          echo "authtoken: $AUTH_TOKEN" >> $CONFIG_FILE
          echo "region: $REGION" >> $CONFIG_FILE

          echo "Installing ngrok..."
          brew install ngrok

          echo "Starting ngrok tunnel on port $PORT..."
          nohup ngrok tcp $PORT --config "$CONFIG_FILE" --log "$NGROK_LOG" > /dev/null 2>&1 &

          echo "Waiting for ngrok to start..."
          sleep 15

          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      - name: Setup Cloudflare Tunnel
        if: inputs.tunnel_provider == 'cloudflare'
        shell: bash
        run: |
          echo "Installing cloudflared..."
          brew install cloudflare/cloudflare/cloudflared

          echo "Starting cloudflare tunnel..."
          CF_LOG="cloudflared.log"
          TOKEN="${{ secrets.CF_TUNNEL_TOKEN }}"

          if [ -z "$TOKEN" ]; then
            echo "::error::Cloudflare tunnel token is not set. Please set the CF_TUNNEL_TOKEN secret."
            exit 1
          fi

          nohup cloudflared tunnel --url tcp://localhost:5900 --token $TOKEN > $CF_LOG 2>&1 &

          echo "Waiting for cloudflared to start..."
          sleep 5

          for i in {1..10}; do
            TUNNEL_URL=$(grep -o 'https://[a-z-]*\.trycloudflare\.com' $CF_LOG | head -n 1)
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 3
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get Cloudflare tunnel info after multiple attempts."
            echo "Cloudflared log content:"
            cat "$CF_LOG" 2>/dev/null || echo "No cloudflared log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|https://||')
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "Tunnel established successfully: $RDP_ADDRESS"

      - name: Display Connection Details (Ngrok)
        if: inputs.tunnel_provider == 'ngrok'
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: macos-latest"
          echo "Protocol: VNC (Use a VNC Viewer like RealVNC or TightVNC)"
          echo "Port: 5900"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ inputs.username }}"
          echo "Password: ${{ secrets.USER_PASSWORD }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      - name: Display Connection Details (Cloudflare)
        if: inputs.tunnel_provider == 'cloudflare'
        run: |
          echo "ðŸŽ¯ CLOUDFLARE CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: macos-latest"
          echo "1. Install cloudflared on your local machine."
          echo "2. Run the following command:"
          echo "   cloudflared access vnc --hostname ${{ env.RDP_ADDRESS }}"
          echo ""
          echo "You will be prompted to log in to your Cloudflare account."
          echo "Once authenticated, the VNC client will launch automatically."
          echo ""
          echo "Username: ${{ inputs.username }}"
          echo "Password: ${{ secrets.USER_PASSWORD }}"
          echo "=========================================="
        shell: bash

      - name: Keep Workflow Alive
        shell: bash
        run: |
          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ inputs.timeout }} minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early."
          sleep ${{ inputs.timeout }}m
